var yahkaAdmin =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./admin/yahka.admin.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./admin/yahka.admin.ts":
/*!******************************!*\
  !*** ./admin/yahka.admin.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar $ = __webpack_require__(/*! jquery */ \"jquery\");\nfunction isBridgeConfig(config) {\n    if (config === undefined)\n        return false;\n    return config.configType === \"bridge\";\n}\nfunction isDeviceConfig(config) {\n    if (config === undefined)\n        return false;\n    return config.configType === \"customdevice\" || config.services !== undefined;\n}\nfunction isIPCameraConfig(config) {\n    if (config === undefined)\n        return false;\n    return config.configType === \"ipcamera\";\n}\nvar defaultCommandLine = {\n    stream: [\n        '-re',\n        '-i', '${source}',\n        '-threads', '0',\n        '-vcodec', '${codec}',\n        '-an',\n        '-pix_fmt', 'yuv420p',\n        '-r', '${fps}',\n        '-f', 'rawvideo',\n        '-tune', 'zerolatency',\n        '-vf', 'scale=${width}:${height}',\n        '-b:v', '${bitrate}k',\n        '-bufsize', '${bitrate}k',\n        '-payload_type', '99',\n        '-ssrc', '1',\n        '-f', 'rtp',\n        '-srtp_out_suite', 'AES_CM_128_HMAC_SHA1_80',\n        '-srtp_out_params', '${videokey}',\n        'srtp://${targetAddress}:${targetVideoPort}?rtcpport=${targetVideoPort}&localrtcpport=${targetVideoPort}&pkt_size=1378'\n    ],\n    snapshot: [\n        '-re',\n        '-i', '${source}',\n        '-t', '1',\n        '-s', '${width}x${height}',\n        '-f', 'image2',\n        '-'\n    ]\n};\nvar webcamCommandLine = {\n    stream: [\n        '-re',\n        '-f', 'dshow',\n        '-i', '${source}',\n        '-threads', '0',\n        '-vcodec', '${codec}',\n        '-an',\n        '-pix_fmt', 'yuv420p',\n        '-r', '${fps}',\n        '-f', 'rawvideo',\n        '-tune', 'zerolatency',\n        '-vf', 'scale=${width}:${height}',\n        '-b:v', '${bitrate}k',\n        '-bufsize', '${bitrate}k',\n        '-payload_type', '99',\n        '-ssrc', '1',\n        '-f', 'rtp',\n        '-srtp_out_suite', 'AES_CM_128_HMAC_SHA1_80',\n        '-srtp_out_params', '${videokey}',\n        'srtp://${targetAddress}:${targetVideoPort}?rtcpport=${targetVideoPort}&localrtcpport=${targetVideoPort}&pkt_size=1378'\n    ],\n    snapshot: [\n        '-re',\n        '-f', 'dshow',\n        '-i', '${source}',\n        '-t', '1',\n        '-s', '${width}x${height}',\n        '-f', 'image2',\n        '-'\n    ]\n};\nvar ffmpegCommandLines = {\n    default: defaultCommandLine,\n    webcam: webcamCommandLine\n};\nvar inoutFunctions = new Map([\n    [\"\", function (valueChangeCallback) { return new ParameterEditor_Null(valueChangeCallback); }],\n    [\"const\", function (valueChangeCallback) { return new ParameterEditor_Const(valueChangeCallback); }],\n    [\"ioBroker.State\", function (valueChangeCallback) { return new ParameterEditor_SingleState(valueChangeCallback); }],\n    [\"ioBroker.State.Defered\", function (valueChangeCallback) { return new ParameterEditor_SingleState(valueChangeCallback); }],\n    [\"ioBroker.State.OnlyACK\", function (valueChangeCallback) { return new ParameterEditor_SingleState(valueChangeCallback); }],\n    [\"ioBroker.homematic.WindowCovering.TargetPosition\", function (valueChangeCallback) { return new ParameterEditor_HomeMaticWindowCoveringTargetPosition(valueChangeCallback); }]\n]);\nvar convFunctions = new Map([\n    [\"\", function (valueChangeCallback) { return new ParameterEditor_Null(valueChangeCallback); }],\n    [\"hue\", function (valueChangeCallback) { return new ParameterEditor_Null(valueChangeCallback); }],\n    [\"level255\", function (valueChangeCallback) { return new ParameterEditor_Null(valueChangeCallback); }],\n    [\"passthrough\", function (valueChangeCallback) { return new ParameterEditor_Null(valueChangeCallback); }],\n    [\"inverse\", function (valueChangeCallback) { return new ParameterEditor_Const(valueChangeCallback); }],\n    [\"scaleInt\", function (valueChangeCallback) { return new ParameterEditor_ScaleConversionEditor(valueChangeCallback); }],\n    [\"scaleFloat\", function (valueChangeCallback) { return new ParameterEditor_ScaleConversionEditor(valueChangeCallback); }],\n    [\"HomematicDirectionToHomekitPositionState\", function (valueChangeCallback) { return new ParameterEditor_SingleState(valueChangeCallback); }],\n    [\"HomematicControlModeToHomekitHeathingCoolingState\", function (valueChangeCallback) { return new ParameterEditor_SingleState(valueChangeCallback); }],\n    [\"script\", function (valueChangeCallback) { return new ParameterEditor_ConversionScript(valueChangeCallback); }],\n]);\nvar HAPServiceDictionary = {};\ngetObject('yahka.meta._serviceDictionary', function (error, object) {\n    HAPServiceDictionary = object.native;\n});\nvar accessoryCategories = {};\ngetObject('yahka.meta._accessoryCategories', function (error, object) {\n    accessoryCategories = object.native;\n});\nfunction generateRandomUsername() {\n    var usr = [];\n    for (var i = 0; i < 6; i++)\n        usr[i] = ('00' + (Math.floor((Math.random() * 256)).toString(16))).substr(-2);\n    return usr.join(':');\n}\nvar ioBroker_YahkaAdmin = /** @class */ (function () {\n    function ioBroker_YahkaAdmin() {\n    }\n    ioBroker_YahkaAdmin.prototype.loadSettings = function (settingsObject, onChangeCallback) {\n        this.settings = settingsObject;\n        if (settingsObject.cameras === undefined) {\n            settingsObject.cameras = [];\n        }\n        new ioBroker_YahkaPageBuilder(this.settings.bridge, this.settings.cameras, onChangeCallback);\n        onChangeCallback(false);\n    };\n    ioBroker_YahkaAdmin.prototype.saveSettings = function (callback) {\n        callback(this.settings);\n    };\n    return ioBroker_YahkaAdmin;\n}());\nexports.ioBroker_YahkaAdmin = ioBroker_YahkaAdmin;\nvar ioBroker_YahkaPageBuilder = /** @class */ (function () {\n    function ioBroker_YahkaPageBuilder(_bridgeSettings, cameraConfigs, _changeCallback) {\n        this._bridgeSettings = _bridgeSettings;\n        this.cameraConfigs = cameraConfigs;\n        this._changeCallback = _changeCallback;\n        this.pageBuilders = new Map();\n        this._selectedDeviceConfig = undefined;\n        if (!_bridgeSettings.devices)\n            _bridgeSettings.devices = [];\n        _bridgeSettings.configType = 'bridge';\n        this.deviceListHandler = new ioBroker_DeviceListHandler(this);\n        this.buttonHandler = new ioBroker_ButtonHandler(this, this.deviceListHandler);\n        this.pageBuilders.set('bridge', new ConfigPageBuilder_BridgeConfig(this));\n        this.pageBuilders.set('customdevice', new ConfigPageBuilder_CustomDevice(this));\n        this.pageBuilders.set('ipcamera', new ConfigPageBuilder_IPCamera(this));\n        this.bootstrap();\n    }\n    ioBroker_YahkaPageBuilder.prototype.bootstrap = function () {\n        var bridgeFrame = document.querySelector('#yahka_bridge_frame');\n        this.deviceListHandler.buildDeviceList(bridgeFrame);\n        this.buttonHandler.bindBridgeButtons(bridgeFrame);\n        this.buttonHandler.refreshBridgeButtons(bridgeFrame);\n        return bridgeFrame;\n    };\n    ioBroker_YahkaPageBuilder.prototype.deviceIsUnique = function (deviceConfig) {\n        var devList = this.deviceListHandler.getDeviceList();\n        return !devList.some(function (a) { return (a.name == deviceConfig.name) && (a !== deviceConfig); });\n    };\n    ioBroker_YahkaPageBuilder.prototype.getPageBuilderByConfig = function (deviceConfig) {\n        if (deviceConfig === undefined) {\n            return undefined;\n        }\n        var configType = deviceConfig.configType;\n        if (configType === undefined) {\n            if (isBridgeConfig(deviceConfig)) {\n                configType = 'bridge';\n            }\n            else if (isDeviceConfig(deviceConfig)) {\n                configType = 'customdevice';\n            }\n        }\n        return this.pageBuilders.get(configType);\n    };\n    Object.defineProperty(ioBroker_YahkaPageBuilder.prototype, \"bridgeSettings\", {\n        get: function () {\n            return this._bridgeSettings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ioBroker_YahkaPageBuilder.prototype, \"selectedDeviceConfig\", {\n        get: function () {\n            return this._selectedDeviceConfig;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ioBroker_YahkaPageBuilder.prototype.refreshDevicePanel = function (deviceConfig, AFocusLastPanel) {\n        var pageBuilder = this.getPageBuilderByConfig(deviceConfig);\n        var devicePanel = document.querySelector('#yahka_device_details');\n        if (devicePanel) {\n            devicePanel.innerHTML = '';\n        }\n        if (pageBuilder) {\n            pageBuilder.refresh(deviceConfig, AFocusLastPanel, devicePanel);\n        }\n    };\n    ioBroker_YahkaPageBuilder.prototype.setSelectedDeviceConfig = function (deviceConfig, AFocusLastPanel) {\n        this._selectedDeviceConfig = deviceConfig;\n        this.refreshDevicePanel(deviceConfig, AFocusLastPanel);\n        this.buttonHandler.refreshBridgeButtons(document.body);\n    };\n    ioBroker_YahkaPageBuilder.prototype.refreshDeviceListEntry = function (deviceConfig) {\n        this.deviceListHandler.refreshDeviceList();\n    };\n    ioBroker_YahkaPageBuilder.prototype.changeCallback = function () {\n        return this._changeCallback();\n    };\n    return ioBroker_YahkaPageBuilder;\n}());\nvar ConfigPageBuilder_Base = /** @class */ (function () {\n    function ConfigPageBuilder_Base(delegate) {\n        this.delegate = delegate;\n    }\n    ConfigPageBuilder_Base.prototype.refreshSimpleErrorElement = function (errorElement, validator) {\n        var errorVisible = false;\n        if (validator)\n            errorVisible = validator();\n        if (errorElement)\n            errorElement.classList.toggle('validationError', errorVisible);\n    };\n    return ConfigPageBuilder_Base;\n}());\nvar ioBroker_DeviceListHandler = /** @class */ (function (_super) {\n    __extends(ioBroker_DeviceListHandler, _super);\n    function ioBroker_DeviceListHandler(delegate) {\n        var _this = _super.call(this, delegate) || this;\n        _this.listEntryToConfigMap = new Map();\n        _this.deviceListEntryTemplate = document.querySelector('#yahka_devicelist_entry');\n        return _this;\n    }\n    ioBroker_DeviceListHandler.prototype.getDeviceList = function () {\n        var result = [this.delegate.bridgeSettings];\n        var devices = [];\n        if (this.delegate.bridgeSettings.devices)\n            devices = devices.concat(this.delegate.bridgeSettings.devices);\n        if (this.delegate.cameraConfigs)\n            devices = devices.concat(this.delegate.cameraConfigs);\n        return result.concat(devices.sort(function (a, b) { return a.name.localeCompare(b.name); }));\n    };\n    ioBroker_DeviceListHandler.prototype.createDeviceListEntry = function (deviceConfig) {\n        var deviceEntry = document.importNode(this.deviceListEntryTemplate.content, true);\n        var listItem = deviceEntry.querySelector('.list');\n        this.refreshDeviceListEntry(deviceConfig, listItem);\n        return deviceEntry;\n    };\n    ioBroker_DeviceListHandler.prototype.buildDeviceList = function (bridgeFrame) {\n        var e_1, _a;\n        var bridge = this.delegate.bridgeSettings;\n        var deviceList = bridgeFrame.querySelector('#yahka_deviceList');\n        deviceList.innerHTML = \"\";\n        this.listEntryToConfigMap.clear();\n        try {\n            for (var _b = __values(this.getDeviceList()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var deviceConfig = _c.value;\n                var fragment = this.createDeviceListEntry(deviceConfig);\n                var node = fragment.querySelector('.list');\n                this.listEntryToConfigMap.set(node, deviceConfig);\n                deviceList.appendChild(fragment);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        $(deviceList).listview({ onListClick: this.handleDeviceListClick.bind(this) });\n    };\n    ioBroker_DeviceListHandler.prototype.refreshDeviceList = function () {\n        var _this = this;\n        this.listEntryToConfigMap.forEach(function (node, element) { return _this.refreshDeviceListEntry(node, element); });\n    };\n    ioBroker_DeviceListHandler.prototype.refreshDeviceListEntry = function (deviceConfig, listItem) {\n        if (!listItem)\n            return;\n        var pageBuilder = this.delegate.getPageBuilderByConfig(deviceConfig);\n        listItem.querySelector('.list-title').textContent = deviceConfig.name;\n        listItem.classList.toggle('active', (deviceConfig === this.delegate.selectedDeviceConfig));\n        var stylingDone = false;\n        if (pageBuilder !== undefined) {\n            stylingDone = pageBuilder.styleListItem(listItem, deviceConfig);\n        }\n        listItem.classList.toggle('error', !this.delegate.deviceIsUnique(deviceConfig));\n        if (!stylingDone) {\n            var listIcon = listItem.querySelector('.list-icon');\n            listIcon.className = 'list-icon icon mif-question';\n        }\n    };\n    ioBroker_DeviceListHandler.prototype.handleDeviceListClick = function (deviceNode) {\n        if (!deviceNode)\n            return;\n        var deviceConfig = this.listEntryToConfigMap.get(deviceNode[0]);\n        this.delegate.setSelectedDeviceConfig(deviceConfig, false);\n    };\n    return ioBroker_DeviceListHandler;\n}(ConfigPageBuilder_Base));\nvar ioBroker_ButtonHandler = /** @class */ (function (_super) {\n    __extends(ioBroker_ButtonHandler, _super);\n    function ioBroker_ButtonHandler(delegate, deviceListHandler) {\n        var _this = _super.call(this, delegate) || this;\n        _this.deviceListHandler = deviceListHandler;\n        return _this;\n    }\n    ioBroker_ButtonHandler.prototype.bindBridgeButtons = function (bridgePane) {\n        var _this = this;\n        var bridge = this.delegate.bridgeSettings;\n        var elem;\n        if (elem = bridgePane.querySelector('#yahka_add_device')) {\n            elem.addEventListener('click', function (e) {\n                e.preventDefault();\n                var newCustomDevice = {\n                    configType: \"customdevice\",\n                    manufacturer: \"\",\n                    model: \"\",\n                    name: \"<new device \" + _this.deviceListHandler.getDeviceList().length + \">\",\n                    serial: \"\",\n                    enabled: true,\n                    category: 1,\n                    services: []\n                };\n                bridge.devices.push(newCustomDevice);\n                _this.delegate.setSelectedDeviceConfig(newCustomDevice, true);\n                _this.deviceListHandler.buildDeviceList(bridgePane);\n                _this.delegate.changeCallback();\n            });\n        }\n        if (elem = bridgePane.querySelector('#yahka_add_camera')) {\n            elem.addEventListener('click', function (e) {\n                e.preventDefault();\n                var newIPCamera = {\n                    configType: \"ipcamera\",\n                    ident: \"\",\n                    manufacturer: \"\",\n                    model: \"\",\n                    name: \"<new camera \" + _this.deviceListHandler.getDeviceList().length + \">\",\n                    serial: \"\",\n                    port: 0,\n                    username: generateRandomUsername(),\n                    pincode: \"123-45-678\",\n                    enabled: true,\n                    source: \"\",\n                    codec: \"libx264\",\n                    maxWidth: 1920,\n                    maxHeight: 1080,\n                    maxFPS: 60,\n                    verboseLogging: false,\n                    numberOfStreams: undefined,\n                    ffmpegCommandLine: ffmpegCommandLines.default,\n                    devices: []\n                };\n                _this.delegate.cameraConfigs.push(newIPCamera);\n                _this.delegate.setSelectedDeviceConfig(newIPCamera, true);\n                _this.deviceListHandler.buildDeviceList(bridgePane);\n                _this.delegate.changeCallback();\n            });\n        }\n        if (elem = bridgePane.querySelector('#yahka_add_service')) {\n            elem.addEventListener('click', function (e) {\n                e.preventDefault();\n                var dev = _this.delegate.selectedDeviceConfig;\n                if (!isDeviceConfig(dev))\n                    return;\n                dev.services.push({\n                    name: '',\n                    subType: '',\n                    type: '',\n                    characteristics: []\n                });\n                _this.delegate.refreshDevicePanel(dev, true);\n                _this.delegate.changeCallback();\n            });\n        }\n        if (elem = bridgePane.querySelector('#yahka_remove_device')) {\n            elem.addEventListener('click', function (e) {\n                e.preventDefault();\n                var dev = _this.delegate.selectedDeviceConfig;\n                if (isDeviceConfig(dev)) {\n                    var idx = bridge.devices.indexOf(dev);\n                    if (idx > -1) {\n                        bridge.devices.splice(idx, 1);\n                        _this.delegate.changeCallback();\n                        _this.delegate.setSelectedDeviceConfig(undefined, false);\n                        _this.deviceListHandler.buildDeviceList(bridgePane);\n                        _this.delegate.changeCallback();\n                    }\n                }\n                else if (isIPCameraConfig(dev)) {\n                    var idx = _this.delegate.cameraConfigs.indexOf(dev);\n                    if (idx > -1) {\n                        _this.delegate.cameraConfigs.splice(idx, 1);\n                        _this.delegate.changeCallback();\n                        _this.delegate.setSelectedDeviceConfig(undefined, false);\n                        _this.deviceListHandler.buildDeviceList(bridgePane);\n                        _this.delegate.changeCallback();\n                    }\n                }\n            });\n        }\n        if (elem = bridgePane.querySelector('#yahka_duplicate_device')) {\n            elem.addEventListener('click', function (e) {\n                e.preventDefault();\n                var dev = _this.delegate.selectedDeviceConfig;\n                var copyOfDevice = $.extend(true, {}, dev);\n                copyOfDevice.name = copyOfDevice.name + \" copy\";\n                if (isDeviceConfig(copyOfDevice)) {\n                    copyOfDevice.serial = \"\";\n                    bridge.devices.push(copyOfDevice);\n                }\n                else if (isIPCameraConfig(copyOfDevice)) {\n                    copyOfDevice.serial = \"\";\n                    _this.delegate.cameraConfigs.push(copyOfDevice);\n                }\n                else {\n                    return;\n                }\n                _this.delegate.setSelectedDeviceConfig(copyOfDevice, true);\n                _this.deviceListHandler.buildDeviceList(bridgePane);\n                _this.delegate.changeCallback();\n            });\n        }\n    };\n    ioBroker_ButtonHandler.prototype.refreshBridgeButtons = function (parent) {\n        // let addDeviceButton    = <HTMLElement>document.querySelector('#yahka_add_device');\n        var addServiceButton = parent.querySelector('#yahka_add_service');\n        var removeDeviceButton = parent.querySelector('#yahka_remove_device');\n        var duplicateDeviceButton = parent.querySelector('#yahka_duplicate_device');\n        var pageBuilder = this.delegate.getPageBuilderByConfig(this.delegate.selectedDeviceConfig);\n        var addServiceEnabled = pageBuilder ? pageBuilder.addServiceAvailable : false;\n        var removeDevEnabled = pageBuilder ? pageBuilder.removeDeviceAvailable : false;\n        var duplicateDeviceEnabled = pageBuilder ? pageBuilder.dupliacteDeviceAvailable : false;\n        if (addServiceEnabled)\n            addServiceButton.removeAttribute('disabled');\n        else\n            addServiceButton.setAttribute('disabled', '');\n        if (removeDevEnabled)\n            removeDeviceButton.removeAttribute('disabled');\n        else\n            removeDeviceButton.setAttribute('disabled', '');\n        if (duplicateDeviceEnabled)\n            duplicateDeviceButton.removeAttribute('disabled');\n        else\n            duplicateDeviceButton.setAttribute('disabled', '');\n    };\n    return ioBroker_ButtonHandler;\n}(ConfigPageBuilder_Base));\nvar ConfigPageBuilder_BridgeConfig = /** @class */ (function (_super) {\n    __extends(ConfigPageBuilder_BridgeConfig, _super);\n    function ConfigPageBuilder_BridgeConfig(delegate) {\n        var _this = _super.call(this, delegate) || this;\n        _this.delegate = delegate;\n        _this.addServiceAvailable = false;\n        _this.removeDeviceAvailable = false;\n        _this.dupliacteDeviceAvailable = false;\n        _this.bridgeConfigPanelTemplate = document.querySelector('#yahka_bridgeconfig_template');\n        return _this;\n    }\n    ConfigPageBuilder_BridgeConfig.prototype.refresh = function (config, AFocusLastPanel, devicePanel) {\n        var _this = this;\n        if (!isBridgeConfig(config)) {\n            return;\n        }\n        var bridgeConfigFragment = document.importNode(this.bridgeConfigPanelTemplate.content, true);\n        translateFragment(bridgeConfigFragment);\n        var inputHelper = function (selector, propertyName, validator) {\n            if (validator === void 0) { validator = undefined; }\n            var input = bridgeConfigFragment.querySelector(selector);\n            var errorElement = bridgeConfigFragment.querySelector(selector + '_error');\n            var value = config[propertyName];\n            if (value !== undefined) {\n                input.value = value;\n            }\n            else {\n                input.value = '';\n            }\n            input.addEventListener(\"input\", _this.handleBridgeMetaDataChange.bind(_this, config, propertyName, errorElement, validator));\n            _this.refreshSimpleErrorElement(errorElement, validator);\n        };\n        var checkboxHelper = function (selector, propertyName, validator) {\n            if (validator === void 0) { validator = undefined; }\n            var input = bridgeConfigFragment.querySelector(selector);\n            var errorElement = bridgeConfigFragment.querySelector(selector + '_error');\n            var value = config[propertyName];\n            input.checked = value;\n            input.addEventListener(\"click\", _this.handleBridgeMetaDataChange.bind(_this, config, propertyName, errorElement, validator));\n            _this.refreshSimpleErrorElement(errorElement, validator);\n        };\n        inputHelper('#name', 'name', function () { return !_this.delegate.deviceIsUnique(config); });\n        inputHelper('#manufacturer', 'manufacturer');\n        inputHelper('#model', 'model');\n        inputHelper('#serial', 'serial');\n        inputHelper('#username', 'username');\n        inputHelper('#pincode', 'pincode');\n        inputHelper('#port', 'port');\n        checkboxHelper('#verboseLogging', 'verboseLogging');\n        devicePanel.appendChild(bridgeConfigFragment);\n    };\n    ConfigPageBuilder_BridgeConfig.prototype.styleListItem = function (listItem, deviceConfig) {\n        var listIcon = listItem.querySelector('.list-icon');\n        listIcon.className = 'list-icon icon mif-tree';\n        listItem.classList.add('fg-grayDark');\n        return true;\n    };\n    ConfigPageBuilder_BridgeConfig.prototype.handleBridgeMetaDataChange = function (bridgeConfig, propertyName, errorElement, validator, ev) {\n        var inputTarget = ev.currentTarget;\n        if (inputTarget.type == \"checkbox\") {\n            bridgeConfig[propertyName] = inputTarget.checked;\n        }\n        else {\n            bridgeConfig[propertyName] = inputTarget.value;\n        }\n        this.refreshSimpleErrorElement(errorElement, validator);\n        this.delegate.refreshDeviceListEntry(bridgeConfig);\n        this.delegate.changeCallback();\n    };\n    return ConfigPageBuilder_BridgeConfig;\n}(ConfigPageBuilder_Base));\nvar ConfigPageBuilder_CustomDevice = /** @class */ (function (_super) {\n    __extends(ConfigPageBuilder_CustomDevice, _super);\n    function ConfigPageBuilder_CustomDevice(delegate) {\n        var _this = _super.call(this, delegate) || this;\n        _this.delegate = delegate;\n        _this.addServiceAvailable = true;\n        _this.removeDeviceAvailable = true;\n        _this.dupliacteDeviceAvailable = true;\n        _this.deviceInfoPanelTemplate = document.querySelector('#yahka_device_info_panel_template');\n        _this.deviceServicePanelTemplate = document.querySelector('#yahka_device_service_panel');\n        _this.characteristicRow = document.querySelector('#yahka_characteristic_row');\n        return _this;\n    }\n    ConfigPageBuilder_CustomDevice.prototype.refresh = function (config, AFocusLastPanel, devicePanel) {\n        var e_2, _a;\n        if (!isDeviceConfig(config)) {\n            return;\n        }\n        var lastPane = this.buildDeviceInformationPanel(config, devicePanel);\n        try {\n            for (var _b = __values(config.services), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var serviceConfig = _c.value;\n                var servicePanel = this.createServicePanel(config, serviceConfig);\n                devicePanel.appendChild(servicePanel);\n                lastPane = servicePanel;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        if (AFocusLastPanel && lastPane) {\n            lastPane.scrollIntoView();\n            if (!lastPane.classList.contains('active')) {\n                var heading = lastPane.querySelector('.heading');\n                if (heading)\n                    heading.click();\n            }\n        }\n    };\n    ConfigPageBuilder_CustomDevice.prototype.styleListItem = function (listItem, deviceConfig) {\n        if (!isDeviceConfig(deviceConfig)) {\n            return false;\n        }\n        var iconClass = \"mif-question\";\n        var cat;\n        if (accessoryCategories !== undefined) {\n            if (cat = accessoryCategories[deviceConfig.category])\n                iconClass = cat['icon'];\n        }\n        var listIcon = listItem.querySelector('.list-icon');\n        listIcon.className = \"\";\n        listIcon.classList.add('list-icon', 'icon', iconClass);\n        listItem.classList.toggle('fg-grayLight', !deviceConfig.enabled);\n        listItem.classList.toggle('fg-grayDark', deviceConfig.enabled);\n        return true;\n    };\n    ConfigPageBuilder_CustomDevice.prototype.buildDeviceInformationPanel = function (deviceConfig, devicePane) {\n        var _this = this;\n        var devInfoFragment = document.importNode(this.deviceInfoPanelTemplate.content, true);\n        var devInfoPanel = devInfoFragment.querySelector('#yahka_device_info_panel');\n        translateFragment(devInfoFragment);\n        var inputHelper = function (selector, propertyName, selectList, validator) {\n            if (validator === void 0) { validator = undefined; }\n            var input = devInfoPanel.querySelector(selector);\n            var errorElement = devInfoPanel.querySelector(selector + '_error');\n            if (selectList) {\n                _this.fillSelectByDict(input, selectList);\n            }\n            var value = deviceConfig[propertyName];\n            if (input.type === 'checkbox') {\n                input.checked = value === undefined ? true : value;\n                input.addEventListener('change', _this.handleDeviceMetaDataChange.bind(_this, deviceConfig, propertyName, errorElement, validator));\n            }\n            else {\n                if (value !== undefined) {\n                    input.value = value;\n                }\n                else {\n                    input.value = '';\n                }\n                input.addEventListener('input', _this.handleDeviceMetaDataChange.bind(_this, deviceConfig, propertyName, errorElement, validator));\n            }\n            _this.refreshSimpleErrorElement(errorElement, validator);\n        };\n        inputHelper('#name', 'name', undefined, function () { return !_this.delegate.deviceIsUnique(deviceConfig); });\n        inputHelper('#enabled', 'enabled');\n        inputHelper('#manufacturer', 'manufacturer');\n        inputHelper('#model', 'model');\n        inputHelper('#serial', 'serial');\n        inputHelper('#category', 'category', accessoryCategories);\n        devicePane.appendChild(devInfoFragment);\n        return devInfoPanel;\n    };\n    ConfigPageBuilder_CustomDevice.prototype.createServicePanel = function (deviceConfig, serviceConfig) {\n        var _this = this;\n        var servicePanel = document.importNode(this.deviceServicePanelTemplate.content, true);\n        var frameNode = servicePanel.querySelector('#yahka_service_panel');\n        translateFragment(servicePanel);\n        var inputHelper = function (selector, configName, popuplateServices, eventHandler) {\n            var input = frameNode.querySelector(selector);\n            if (popuplateServices === true) {\n                var selectList = Object.keys(HAPServiceDictionary);\n                _this.fillSelectByArray(input, selectList);\n            }\n            if (serviceConfig) {\n                var value = serviceConfig[configName];\n                if (value !== undefined) {\n                    input.value = value;\n                }\n                else {\n                    input.value = '';\n                }\n            }\n            if (eventHandler !== undefined)\n                input.addEventListener('input', eventHandler);\n            else\n                input.addEventListener('input', _this.handleServiceMetaDataChange.bind(_this, serviceConfig, frameNode, configName));\n        };\n        this.refreshServicePanelCaption(serviceConfig, frameNode);\n        inputHelper('#service_name', 'name');\n        inputHelper('#service_type', 'type', true, this.handleServiceTypeChange.bind(this, serviceConfig, frameNode));\n        inputHelper('#service_subtype', 'subType');\n        this.buildCharacteristicTable(serviceConfig, frameNode);\n        // bind delete buttton\n        frameNode.querySelector('#yakha_delete_service').addEventListener('click', function () {\n            var idx = deviceConfig.services.indexOf(serviceConfig);\n            if (idx > -1) {\n                deviceConfig.services.splice(idx, 1);\n                _this.delegate.changeCallback();\n                frameNode.parentNode.removeChild(frameNode);\n            }\n            _this.delegate.setSelectedDeviceConfig(undefined, false);\n        });\n        return frameNode;\n    };\n    ConfigPageBuilder_CustomDevice.prototype.refreshServicePanelCaption = function (serviceConfig, servicePanel) {\n        servicePanel.querySelector('#yahka_service_caption').textContent = serviceConfig.name + '[' + serviceConfig.type + ']';\n    };\n    ConfigPageBuilder_CustomDevice.prototype.findHAPCharacteristic = function (serviceDef, characteristicName) {\n        if (!serviceDef)\n            return undefined;\n        var x;\n        if (x = serviceDef.characteristics[characteristicName])\n            return x;\n        return undefined;\n    };\n    ConfigPageBuilder_CustomDevice.prototype.findConfigCharacteristic = function (service, characteristicName) {\n        var e_3, _a;\n        if (!service) {\n            return undefined;\n        }\n        try {\n            for (var _b = __values(service.characteristics), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var cfg = _c.value;\n                if (cfg.name == characteristicName) {\n                    return cfg;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return undefined;\n    };\n    ConfigPageBuilder_CustomDevice.prototype.isEmptyCharacteristic = function (charConfig) {\n        if (charConfig === undefined)\n            return true;\n        if (charConfig.name === '')\n            return true;\n        if ((charConfig['inOutFunction'] === '') || (charConfig['inOutFunction'] === undefined))\n            return true;\n        return false;\n    };\n    ConfigPageBuilder_CustomDevice.prototype.removeCharacteristic = function (serviceConfig, charConfig) {\n        if (serviceConfig === undefined) {\n            return;\n        }\n        var idx = serviceConfig.characteristics.indexOf(charConfig);\n        if (idx > -1) {\n            serviceConfig.characteristics.splice(idx, 1);\n            this.delegate.changeCallback();\n        }\n    };\n    ConfigPageBuilder_CustomDevice.prototype.buildCharacteristicTable = function (serviceConfig, servicePanel) {\n        var e_4, _a, e_5, _b;\n        var serviceDef = HAPServiceDictionary[serviceConfig.type];\n        var createdCharacteristics = {};\n        try {\n            for (var _c = __values(serviceConfig.characteristics), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var charConfig = _d.value;\n                var charDef = this.findHAPCharacteristic(serviceDef, charConfig.name);\n                if ((charDef === undefined) && (this.isEmptyCharacteristic(charConfig))) {\n                    this.removeCharacteristic(serviceConfig, charConfig);\n                    continue;\n                }\n                var charRow = this.createCharacteristicRow(charDef, serviceConfig, charConfig);\n                createdCharacteristics[charConfig.name] = [charConfig.name, charDef ? charDef.optional : false, charRow];\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        // add undefined characteristics\n        if (serviceDef) {\n            for (var charName in serviceDef.characteristics) {\n                if (createdCharacteristics[charName] === undefined) {\n                    var charDef = serviceDef.characteristics[charName];\n                    var charRow = this.createCharacteristicRow(charDef, serviceConfig, undefined);\n                    createdCharacteristics[charName] = [charName, charDef.optional, charRow];\n                }\n            }\n        }\n        var charRows = [];\n        for (var charRow in createdCharacteristics)\n            charRows.push(createdCharacteristics[charRow]);\n        charRows.sort(function (a, b) {\n            if (a[1] != b[1])\n                return a[1] ? -1 : 1;\n            return a[0].localeCompare(b[0]);\n        });\n        var table = servicePanel.querySelector('#yahka_characteristic_table');\n        while (table.childElementCount > 1) { // first row is the header row\n            table.removeChild(table.lastElementChild);\n        }\n        try {\n            for (var charRows_1 = __values(charRows), charRows_1_1 = charRows_1.next(); !charRows_1_1.done; charRows_1_1 = charRows_1.next()) {\n                var row = charRows_1_1.value;\n                table.appendChild(row[2]);\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (charRows_1_1 && !charRows_1_1.done && (_b = charRows_1.return)) _b.call(charRows_1);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n    };\n    ConfigPageBuilder_CustomDevice.prototype.getParameterEditor = function (functionName, valueChangeCallback, functionMap) {\n        if (!functionMap.has(functionName)) {\n            return new ParameterEditor_Null(valueChangeCallback);\n        }\n        var constr = functionMap.get(functionName);\n        return new constr(valueChangeCallback);\n    };\n    ConfigPageBuilder_CustomDevice.prototype.updateParameterEditor = function (functionName, parameterContainer, parameterValue, parameterChangeCallback, functionMap) {\n        var editor = this.getParameterEditor(functionName, parameterChangeCallback, functionMap);\n        if (editor == undefined)\n            return;\n        editor.refreshAndShow(parameterContainer, parameterValue);\n    };\n    ConfigPageBuilder_CustomDevice.prototype.createCharacteristicRow = function (charDef, serviceConfig, charConfig) {\n        var _this = this;\n        var name = charConfig ? charConfig.name : charDef.name;\n        var enabled = charConfig ? charConfig.enabled : false;\n        var rowElement = document.importNode(this.characteristicRow.content, true);\n        translateFragment(rowElement);\n        var bracketElement = rowElement.querySelector('#characteristic');\n        var checkBox = rowElement.querySelector('#characteristic_enabled');\n        checkBox.checked = enabled;\n        checkBox.addEventListener('click', this.handleCharacteristicEnabledChange.bind(this, serviceConfig, name, bracketElement));\n        this.refreshEnabledClass(bracketElement, enabled);\n        this.refershOptionalClass(bracketElement, charDef ? charDef.optional : true);\n        rowElement.querySelector('#characteristic_name').textContent = name;\n        var functionSelector = function (selector, containerSelector, configName, parameterName, functionMap) {\n            var input = rowElement.querySelector(selector);\n            var container = rowElement.querySelector(containerSelector);\n            if (functionMap !== undefined) {\n                var mapKeys = __spread(functionMap.keys());\n                _this.fillSelectByArray(input, mapKeys);\n            }\n            var parameterValue = '';\n            if (charConfig) {\n                var value = charConfig[configName];\n                if (value !== undefined)\n                    input.value = value;\n                else\n                    input.value = \"\";\n                parameterValue = charConfig[parameterName];\n            }\n            if (!parameterValue)\n                parameterValue = '';\n            var paramUpdateMethod = function (newValue) {\n                var charConfig = _this.findConfigCharacteristic(serviceConfig, name);\n                if (charConfig === undefined) {\n                    charConfig = { name: name, enabled: false };\n                    serviceConfig.characteristics.push(charConfig);\n                }\n                charConfig[parameterName] = newValue;\n                _this.delegate.changeCallback();\n            };\n            _this.updateParameterEditor(input.value, container, parameterValue, paramUpdateMethod, functionMap);\n            input.addEventListener('input', function (e) {\n                _this.handleCharacteristicInputChange(serviceConfig, name, configName, e);\n                var charConfig = _this.findConfigCharacteristic(serviceConfig, name);\n                _this.updateParameterEditor(input.value, container, charConfig[parameterName], paramUpdateMethod, functionMap);\n                return false;\n            });\n        };\n        functionSelector('#characteristic_inoutfunction', '#characteristic_inoutparams_container', 'inOutFunction', 'inOutParameters', inoutFunctions);\n        functionSelector('#characteristic_conversionfunction', '#characteristic_conversionparams_container', 'conversionFunction', 'conversionParameters', convFunctions);\n        return rowElement;\n    };\n    ConfigPageBuilder_CustomDevice.prototype.fillSelectByArray = function (inoutSelect, stringlist) {\n        var e_6, _a;\n        try {\n            for (var stringlist_1 = __values(stringlist), stringlist_1_1 = stringlist_1.next(); !stringlist_1_1.done; stringlist_1_1 = stringlist_1.next()) {\n                var itemName = stringlist_1_1.value;\n                var optElem = document.createElement('option');\n                optElem.value = itemName;\n                optElem.text = itemName;\n                inoutSelect.add(optElem);\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (stringlist_1_1 && !stringlist_1_1.done && (_a = stringlist_1.return)) _a.call(stringlist_1);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n    };\n    ConfigPageBuilder_CustomDevice.prototype.fillSelectByDict = function (inoutSelect, dictionary) {\n        for (var key in dictionary) {\n            var optElem = document.createElement('option');\n            optElem.value = key;\n            optElem.text = dictionary[key].text;\n            inoutSelect.add(optElem);\n        }\n    };\n    ConfigPageBuilder_CustomDevice.prototype.refreshEnabledClass = function (row, enabled) {\n        row.classList.toggle('disabled', !enabled);\n    };\n    ConfigPageBuilder_CustomDevice.prototype.refershOptionalClass = function (row, optional) {\n        row.classList.toggle('optional-characteristic', optional);\n    };\n    ConfigPageBuilder_CustomDevice.prototype.handleCharacteristicEnabledChange = function (serviceConfig, charName, charRow, ev) {\n        var charConfig = this.findConfigCharacteristic(serviceConfig, charName);\n        if (charConfig === undefined) {\n            charConfig = { name: charName, enabled: false };\n            serviceConfig.characteristics.push(charConfig);\n        }\n        var inputTarget = ev.currentTarget;\n        charConfig.enabled = inputTarget.checked;\n        this.refreshEnabledClass(charRow, charConfig.enabled);\n        this.delegate.changeCallback();\n    };\n    ConfigPageBuilder_CustomDevice.prototype.handleCharacteristicInputChange = function (serviceConfig, charName, attribute, ev) {\n        var charConfig = this.findConfigCharacteristic(serviceConfig, charName);\n        if (charConfig === undefined) {\n            charConfig = { name: charName, enabled: false };\n            serviceConfig.characteristics.push(charConfig);\n        }\n        var inputTarget = ev.currentTarget;\n        var inputValue = inputTarget.value;\n        charConfig[attribute] = inputValue;\n        this.delegate.changeCallback();\n    };\n    ConfigPageBuilder_CustomDevice.prototype.handleDeviceMetaDataChange = function (deviceConfig, propertyName, errorElement, validator, ev) {\n        var inputTarget = ev.currentTarget;\n        var inputValue = (inputTarget.type === 'checkbox') ? inputTarget.checked : inputTarget.value;\n        deviceConfig[propertyName] = inputValue;\n        this.refreshSimpleErrorElement(errorElement, validator);\n        this.delegate.refreshDeviceListEntry(deviceConfig);\n        this.delegate.changeCallback();\n    };\n    ConfigPageBuilder_CustomDevice.prototype.handleServiceMetaDataChange = function (serviceConfig, servicePanel, attribute, ev) {\n        var inputTarget = ev.currentTarget;\n        var inputValue = inputTarget.value;\n        serviceConfig[attribute] = inputValue;\n        this.refreshServicePanelCaption(serviceConfig, servicePanel);\n        this.delegate.changeCallback();\n    };\n    ConfigPageBuilder_CustomDevice.prototype.handleServiceTypeChange = function (serviceConfig, servicePanel, ev) {\n        var inputTarget = ev.currentTarget;\n        var inputValue = inputTarget.value;\n        serviceConfig.type = inputValue;\n        this.refreshServicePanelCaption(serviceConfig, servicePanel);\n        this.buildCharacteristicTable(serviceConfig, servicePanel);\n        this.delegate.changeCallback();\n    };\n    return ConfigPageBuilder_CustomDevice;\n}(ConfigPageBuilder_Base));\nvar ConfigPageBuilder_IPCamera = /** @class */ (function (_super) {\n    __extends(ConfigPageBuilder_IPCamera, _super);\n    function ConfigPageBuilder_IPCamera(delegate) {\n        var _this = _super.call(this, delegate) || this;\n        _this.delegate = delegate;\n        _this.addServiceAvailable = false;\n        _this.removeDeviceAvailable = true;\n        _this.dupliacteDeviceAvailable = true;\n        _this.configPanelTemplate = document.querySelector('#yahka_cameraConfig_template');\n        return _this;\n    }\n    ConfigPageBuilder_IPCamera.prototype.refresh = function (config, AFocusLastPanel, devicePanel) {\n        var _this = this;\n        if (!isIPCameraConfig(config)) {\n            return;\n        }\n        var configFragment = document.importNode(this.configPanelTemplate.content, true);\n        translateFragment(configFragment);\n        var inputHelper = function (selector, propertyName, validator) {\n            if (validator === void 0) { validator = undefined; }\n            var input = configFragment.querySelector(selector);\n            var errorElement = configFragment.querySelector(selector + '_error');\n            var value = config[propertyName];\n            if (input.type === 'checkbox') {\n                input.checked = value === undefined ? true : value;\n                input.addEventListener('change', _this.handlePropertyChange.bind(_this, config, propertyName, errorElement, validator));\n            }\n            else {\n                if (value !== undefined) {\n                    input.value = value.toString();\n                }\n                else {\n                    input.value = '';\n                }\n                input.addEventListener('input', _this.handlePropertyChange.bind(_this, config, propertyName, errorElement, validator));\n            }\n            _this.refreshSimpleErrorElement(errorElement, validator);\n        };\n        var ffmpegHelper = function (selector, propertyName) {\n            var input = configFragment.querySelector(selector);\n            var inputErrorMsg = configFragment.querySelector(selector + '_error');\n            var value = config.ffmpegCommandLine[propertyName];\n            if (value !== undefined) {\n                input.value = JSON.stringify(value, null, 2);\n            }\n            else {\n                input.value = '';\n            }\n            input.addEventListener('input', _this.handleffMpegPropertyChange.bind(_this, config, propertyName, inputErrorMsg));\n        };\n        inputHelper('#enabled', 'enabled');\n        inputHelper('#name', 'name', function () { return !_this.delegate.deviceIsUnique(config); });\n        inputHelper('#manufacturer', 'manufacturer');\n        inputHelper('#model', 'model');\n        inputHelper('#serial', 'serial');\n        inputHelper('#username', 'username');\n        inputHelper('#pincode', 'pincode');\n        inputHelper('#port', 'port');\n        inputHelper('#source', 'source');\n        inputHelper('#codec', 'codec');\n        inputHelper('#numberOfStreams', 'numberOfStreams');\n        inputHelper('#maxWidth', 'maxWidth');\n        inputHelper('#maxHeight', 'maxHeight');\n        inputHelper('#maxFPS', 'maxFPS');\n        ffmpegHelper('#ffmpeg_snapshot', 'snapshot');\n        ffmpegHelper('#ffmpeg_stream', 'stream');\n        devicePanel.appendChild(configFragment);\n    };\n    ConfigPageBuilder_IPCamera.prototype.styleListItem = function (listItem, deviceConfig) {\n        if (!isIPCameraConfig(deviceConfig)) {\n            return false;\n        }\n        var listIcon = listItem.querySelector('.list-icon');\n        listIcon.className = 'list-icon icon mif-camera';\n        listItem.classList.toggle('fg-grayLight', !deviceConfig.enabled);\n        listItem.classList.toggle('fg-grayDark', deviceConfig.enabled);\n        return true;\n    };\n    ConfigPageBuilder_IPCamera.prototype.handlePropertyChange = function (config, propertyName, errorElement, validator, ev) {\n        var inputTarget = ev.currentTarget;\n        if (inputTarget.type == \"checkbox\") {\n            config[propertyName] = inputTarget.checked;\n        }\n        else {\n            config[propertyName] = inputTarget.value;\n        }\n        this.refreshSimpleErrorElement(errorElement, validator);\n        this.delegate.refreshDeviceListEntry(config);\n        this.delegate.changeCallback();\n    };\n    ConfigPageBuilder_IPCamera.prototype.displayExceptionHint = function (textArea, msgPanel, message) {\n        textArea.classList.toggle('validationError', message !== undefined);\n        msgPanel.classList.toggle('validationError', message !== undefined);\n        msgPanel.innerText = message;\n    };\n    ConfigPageBuilder_IPCamera.prototype.handleffMpegPropertyChange = function (config, propertyName, inputErrorMsgPanel, ev) {\n        var inputTarget = ev.currentTarget;\n        try {\n            config.ffmpegCommandLine[propertyName] = JSON.parse(inputTarget.value);\n            this.displayExceptionHint(inputTarget, inputErrorMsgPanel, undefined);\n        }\n        catch (e) {\n            this.displayExceptionHint(inputTarget, inputErrorMsgPanel, e.message);\n        }\n        this.delegate.refreshDeviceListEntry(config);\n        this.delegate.changeCallback();\n    };\n    return ConfigPageBuilder_IPCamera;\n}(ConfigPageBuilder_Base));\nvar ParameterEditor = /** @class */ (function () {\n    function ParameterEditor(valueChangeCallback) {\n        this.valueChangeCallback = valueChangeCallback;\n    }\n    ParameterEditor.prototype.refreshAndShow = function (containerElement, withValue) {\n    };\n    ParameterEditor.prototype.removeChildren = function (parentNode) {\n        while (parentNode.firstChild) {\n            parentNode.removeChild(parentNode.firstChild);\n        }\n    };\n    ParameterEditor.prototype.cloneTemplateNode = function (selector) {\n        var node = document.querySelector(selector);\n        return document.importNode(node.content, true);\n    };\n    ParameterEditor.prototype.buildNewParameterValue = function () {\n        return undefined;\n    };\n    ParameterEditor.prototype.valueChanged = function () {\n        this.valueChangeCallback(this.buildNewParameterValue());\n    };\n    return ParameterEditor;\n}());\nvar ParameterEditor_Null = /** @class */ (function (_super) {\n    __extends(ParameterEditor_Null, _super);\n    function ParameterEditor_Null() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ParameterEditor_Null.prototype.refreshAndShow = function (containerElement, parameterValue) {\n        this.removeChildren(containerElement);\n        this.lastParamValue = parameterValue;\n    };\n    ParameterEditor_Null.prototype.buildNewParameterValue = function () {\n        return this.lastParamValue;\n    };\n    return ParameterEditor_Null;\n}(ParameterEditor));\nvar ParameterEditor_SingleState = /** @class */ (function (_super) {\n    __extends(ParameterEditor_SingleState, _super);\n    function ParameterEditor_SingleState(valueChangeCallback) {\n        var _this = _super.call(this, valueChangeCallback) || this;\n        _this.templateNode = _this.cloneTemplateNode('#editor_single_state');\n        _this.textField = _this.templateNode.querySelector(\"#textfield\");\n        _this.textField.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        return _this;\n    }\n    ParameterEditor_SingleState.prototype.refreshAndShow = function (containerElement, parameterValue) {\n        this.removeChildren(containerElement);\n        containerElement.appendChild(this.templateNode);\n        this.textField.value = parameterValue;\n    };\n    ParameterEditor_SingleState.prototype.buildNewParameterValue = function () {\n        return this.textField.value;\n    };\n    return ParameterEditor_SingleState;\n}(ParameterEditor));\nvar ParameterEditor_Const = /** @class */ (function (_super) {\n    __extends(ParameterEditor_Const, _super);\n    function ParameterEditor_Const(valueChangeCallback) {\n        var _this = _super.call(this, valueChangeCallback) || this;\n        _this.templateNode = _this.cloneTemplateNode('#editor_const');\n        _this.textField = _this.templateNode.querySelector(\"#textfield\");\n        _this.textField.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        return _this;\n    }\n    ParameterEditor_Const.prototype.refreshAndShow = function (containerElement, parameterValue) {\n        this.removeChildren(containerElement);\n        containerElement.appendChild(this.templateNode);\n        this.textField.value = parameterValue ? parameterValue : \"\";\n    };\n    ParameterEditor_Const.prototype.buildNewParameterValue = function () {\n        return this.textField.value;\n    };\n    return ParameterEditor_Const;\n}(ParameterEditor));\nvar ParameterEditor_ScaleConversionEditor = /** @class */ (function (_super) {\n    __extends(ParameterEditor_ScaleConversionEditor, _super);\n    function ParameterEditor_ScaleConversionEditor(valueChangeCallback) {\n        var _this = _super.call(this, valueChangeCallback) || this;\n        _this.templateNode = _this.cloneTemplateNode('#editor_conversion_scale');\n        _this.txtHKMin = _this.templateNode.querySelector(\"#hkMin\");\n        _this.txtHKMin.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        _this.txtHKMax = _this.templateNode.querySelector(\"#hkMax\");\n        _this.txtHKMax.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        _this.txtIOBrokerMin = _this.templateNode.querySelector(\"#ioMin\");\n        _this.txtIOBrokerMin.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        _this.txtIOBrokerMax = _this.templateNode.querySelector(\"#ioMax\");\n        _this.txtIOBrokerMax.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        return _this;\n    }\n    ParameterEditor_ScaleConversionEditor.prototype.refreshAndShow = function (containerElement, parameterValue) {\n        this.removeChildren(containerElement);\n        containerElement.appendChild(this.templateNode);\n        var parameterArray = undefined;\n        if (typeof parameterValue === 'object') {\n            parameterArray = parameterValue;\n        }\n        else {\n            try {\n                parameterArray = JSON.parse(parameterValue);\n            }\n            catch (e) {\n                this.txtHKMin.value = parameterValue;\n                return;\n            }\n        }\n        this.txtHKMin.value = parameterArray[\"homekit.min\"];\n        this.txtHKMax.value = parameterArray[\"homekit.max\"];\n        this.txtIOBrokerMin.value = parameterArray[\"iobroker.min\"];\n        this.txtIOBrokerMax.value = parameterArray[\"iobroker.max\"];\n    };\n    ParameterEditor_ScaleConversionEditor.prototype.buildNewParameterValue = function () {\n        return {\n            \"homekit.min\": this.txtHKMin.valueAsNumber,\n            \"homekit.max\": this.txtHKMax.valueAsNumber,\n            \"iobroker.min\": this.txtIOBrokerMin.valueAsNumber,\n            \"iobroker.max\": this.txtIOBrokerMax.valueAsNumber\n        };\n    };\n    return ParameterEditor_ScaleConversionEditor;\n}(ParameterEditor));\nvar ParameterEditor_HomeMaticWindowCoveringTargetPosition = /** @class */ (function (_super) {\n    __extends(ParameterEditor_HomeMaticWindowCoveringTargetPosition, _super);\n    function ParameterEditor_HomeMaticWindowCoveringTargetPosition(valueChangeCallback) {\n        var _this = _super.call(this, valueChangeCallback) || this;\n        _this.templateNode = _this.cloneTemplateNode('#editor_conversion_HomeMaticWindowCoveringTargetPosition');\n        _this.txtLevel = _this.templateNode.querySelector(\"#level\");\n        _this.txtLevel.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        _this.txtWorking = _this.templateNode.querySelector(\"#working\");\n        _this.txtWorking.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        return _this;\n    }\n    ParameterEditor_HomeMaticWindowCoveringTargetPosition.prototype.refreshAndShow = function (containerElement, parameterValue) {\n        this.removeChildren(containerElement);\n        containerElement.appendChild(this.templateNode);\n        try {\n            var p = void 0;\n            if (typeof parameterValue === 'string')\n                p = [parameterValue];\n            else if (parameterValue instanceof Array)\n                p = parameterValue;\n            else\n                p = [];\n            this.txtLevel.value = (p.length >= 1) ? p[0] : \"\";\n            this.txtWorking.value = (p.length >= 2) ? p[1] : \"\";\n        }\n        catch (e) {\n            this.txtLevel.value = parameterValue;\n            this.txtWorking.value = \"\";\n        }\n    };\n    ParameterEditor_HomeMaticWindowCoveringTargetPosition.prototype.buildNewParameterValue = function () {\n        var resultArray = [this.txtLevel.value];\n        if (this.txtWorking.value)\n            resultArray.push(this.txtWorking.value);\n        return resultArray;\n    };\n    return ParameterEditor_HomeMaticWindowCoveringTargetPosition;\n}(ParameterEditor));\nvar ParameterEditor_ConversionScript = /** @class */ (function (_super) {\n    __extends(ParameterEditor_ConversionScript, _super);\n    function ParameterEditor_ConversionScript(valueChangeCallback) {\n        var _this = _super.call(this, valueChangeCallback) || this;\n        _this.templateNode = _this.cloneTemplateNode('#editor_conversion_script');\n        _this.txtToHomeKit = _this.templateNode.querySelector(\"#toHomeKit\");\n        _this.txtToHomeKit.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        _this.txtToIOBroker = _this.templateNode.querySelector(\"#toIOBroker\");\n        _this.txtToIOBroker.addEventListener('input', function (ev) { return _this.valueChanged(); });\n        return _this;\n    }\n    ParameterEditor_ConversionScript.prototype.refreshAndShow = function (containerElement, parameterValue) {\n        this.removeChildren(containerElement);\n        containerElement.appendChild(this.templateNode);\n        this.txtToHomeKit.value = parameterValue[\"toHomeKit\"] ? parameterValue[\"toHomeKit\"] : \"\";\n        this.txtToIOBroker.value = parameterValue[\"toIOBroker\"] ? parameterValue[\"toIOBroker\"] : \"\";\n    };\n    ParameterEditor_ConversionScript.prototype.buildNewParameterValue = function () {\n        return {\n            \"toHomeKit\": this.txtToHomeKit.value,\n            \"toIOBroker\": this.txtToIOBroker.value\n        };\n    };\n    return ParameterEditor_ConversionScript;\n}(ParameterEditor));\n\n\n//# sourceURL=webpack://yahkaAdmin/./admin/yahka.admin.ts?");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = jQuery;\n\n//# sourceURL=webpack://yahkaAdmin/external_%22jQuery%22?");

/***/ })

/******/ });